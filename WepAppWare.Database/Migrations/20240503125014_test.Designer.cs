// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAppWare.Database;

#nullable disable

namespace WepAppWare.Database.Migrations
{
    [DbContext(typeof(WarehouseBaseContext))]
    [Migration("20240503125014_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAppWare.Database.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AbsolutePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SupplierId" }, "IX_Orders_SupplierId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrderId" }, "IX_OrderItems_OrderId");

                    b.HasIndex(new[] { "ProductId" }, "IX_OrderItems_ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ImageId" }, "IX_Products_ImageId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.ProductsFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplierId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int");

                    b.Property<int>("WarehouseMovementId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ProductId" }, "IX_ProductsFlows_ProductId");

                    b.HasIndex(new[] { "SupplierId" }, "IX_ProductsFlows_SupplierId");

                    b.HasIndex(new[] { "WarehouseId" }, "IX_ProductsFlows_WarehouseId");

                    b.HasIndex(new[] { "WarehouseMovementId" }, "IX_ProductsFlows_WarehouseMovementId");

                    b.ToTable("ProductsFlows");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("WebAppWare.Database.WarehouseMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovementType")
                        .HasColumnType("int");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseMovements");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Order", b =>
                {
                    b.HasOne("WebAppWare.Database.Entities.Supplier", "Supplier")
                        .WithMany("Orders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.OrderItem", b =>
                {
                    b.HasOne("WebAppWare.Database.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppWare.Database.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Product", b =>
                {
                    b.HasOne("WebAppWare.Database.Entities.Image", "Image")
                        .WithMany("Products")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.ProductsFlow", b =>
                {
                    b.HasOne("WebAppWare.Database.Entities.Product", "Product")
                        .WithMany("ProductsFlows")
                        .HasForeignKey("ProductId");

                    b.HasOne("WebAppWare.Database.Entities.Supplier", "Supplier")
                        .WithMany("ProductsFlows")
                        .HasForeignKey("SupplierId");

                    b.HasOne("WebAppWare.Database.Entities.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAppWare.Database.WarehouseMovement", "WarehouseMovement")
                        .WithMany("ProductsFlows")
                        .HasForeignKey("WarehouseMovementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Supplier");

                    b.Navigation("Warehouse");

                    b.Navigation("WarehouseMovement");
                });

            modelBuilder.Entity("WebAppWare.Database.WarehouseMovement", b =>
                {
                    b.HasOne("WebAppWare.Database.Entities.Warehouse", null)
                        .WithMany("WarehouseMovements")
                        .HasForeignKey("WarehouseId");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Image", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductsFlows");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Supplier", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ProductsFlows");
                });

            modelBuilder.Entity("WebAppWare.Database.Entities.Warehouse", b =>
                {
                    b.Navigation("WarehouseMovements");
                });

            modelBuilder.Entity("WebAppWare.Database.WarehouseMovement", b =>
                {
                    b.Navigation("ProductsFlows");
                });
#pragma warning restore 612, 618
        }
    }
}
