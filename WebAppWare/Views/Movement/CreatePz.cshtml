@model ProductFlowMovementModel

@{
	var items = Model.ProductFlowModels.ToArray();
}

<h4 class="pb-2">Dodawanie PZ</h4>

<form id="form" class="row" data-url="@Url.Action("CreateWarehouseMovement")">

	<div class="col-2">
		<label class="ms-2 pb-2" asp-for="@Model.Document">Nr dokumentu:</label>
		<input id="Document" class="form-control border-0 shadow mb-4" value="@Model.Document" asp-for="@Model.Document" />
		<span class="text-danger" asp-validation-for="@Model.Document"></span>
		<h7 class="text-danger mb-1" id="DocumentWarn"></h7>
	</div>

	<div class="col-2">
		<label class="ms-2 pb-2" asp-for="@Model.Warehouses">Magazyn:</label>
		<select id="WarehouseId" class="form-select border-0 shadow mb-4" asp-items="@Model.Warehouses" asp-for="@Model.WarehouseId">
			<option disabled selected>-- Wybierz magazyn --</option>
		</select>
		<h7 class="text-danger mb-1" id="WarehouseWarn"></h7>
	</div>

	<div class="col-2">
		<input id="submitButton" type="button" class="btn btn-success" value="Zatwierdź" />
	</div>

	<table id="table" class="table table-bordered table-striped" style="width: 100%">
		<thead>
		<th>
			Index
		</th>
		<th>
			Dostawca
		</th>
		<th>
			Ilość
		</th>
		<th>
			<input id="addRowButton" type="button" class="btn btn-success" value="Dodaj kolejny"/>
		</th>
		</thead>

		<tbody id="parentTable">
			<tr name="item">
				<td>
					@Html.DropDownList("items", Model.Products, new { @class = "form-select border-0 shadow mb-2", toggle = "item-property" })
				</td>
				<td>
					@Html.DropDownList("suppliers", Model.Suppliers, new { @class = "form-select border-0 shadow mb-2", toggle = "item-property" })
				</td>
				<td>
					<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
				</td>
				<td>
				</td>
			</tr>
		</tbody>
	</table>
	<h7 class="text-danger mb-2" id="DuplicateWarn"></h7>
	<a class="btn btn-secondary" asp-controller="Movement" asp-action="Index">Wróć do listy</a>

</form>

@section Scripts
{
	<script>
		$(document).ready(function() {
			const addRecord = () => {
				let row = `
							<tr name="item">
								<td>
		@Html.DropDownList("items", Model.Products, new { @class = "form-select border-0 shadow mb-2", @toggle = "item-property" })
								</td>
								<td>
		@Html.DropDownList("suppliers", Model.Suppliers, new { @class = "form-select border-0 shadow mb-2", @toggle = "item-property" })
								</td>
								<td>
									<input toggle="item-property" name="items-property" class="form-control border-0 shadow mb-2" type="text" />
								</td>
								<td>
									<input type="button" class="btn btn-danger" value="Usuń" onclick="removeRecord(this)"/>
								</td>
							</tr>
						`;

				console.log('row', row);

				$('#table tr:last').after(row);
			}

			$('#submitButton').click((e) => {

				onSubmit();
			});

			$('#addRowButton').click(() => {
				addRecord();
			});

			let isCorrectData;
			let documentValidationWarn = $('#DocumentWarn');
			let warehouseValidationWarn = $('#WarehouseWarn');
			let duplicateValidationWarn = $('#DuplicateWarn');

			const onSubmit = () => {

				isCorrectData = true;
				documentValidationWarn.text('');
				warehouseValidationWarn.text('');
				duplicateValidationWarn.text('');

				const form = {
					document: '',
					warehouseId: 0,
					productFlowModels: [],
					movementType: 1 
				};

				form.document = $('#Document').val();
				form.warehouseId = $('#WarehouseId').val();

				if (form.document.length == 0) {
					documentValidationWarn.text('Niepoprawne dane');
					isCorrectData = false;
				}

				if (!form.warehouseId) {
					warehouseValidationWarn.text('Wybierz magazyn');
					isCorrectData = false;
				}

				const items = $('tr[name="item"]');
				const elements = [];
				let itemArray = [];

				$.each(items, function () {

					const properties = $(this).find('[toggle="item-property"]');
					const item = {};
					let i = 0;
					
					$.each(properties, function (index, element) {
						if (i === 0) {
							item.productId = $(element).val();
							itemArray.push(item.productId);
						}

						if (i === 1) {
							item.supplierId = $(this).val();
						}

						if (i === 2) {
							item.quantity = $(this).val();
							let c = parseInt(item.quantity);

							if (isNaN(c)) {
								isCorrectData = false;
								$(element).val('Uzupełnij ilość');
							}
						}

						i++;
					});

					elements.push(item);
				});

				let itemUnique = new Set(itemArray);

				if (itemArray.length != itemUnique.size) {
					duplicateValidationWarn.text('Usuń duplikaty produktów')
					isCorrectData = false;
				}

				form.productFlowModels = elements;

				const data = $('#form');
			
				if (isCorrectData) {

					console.log('isCorrectData:', isCorrectData);

					$.ajax({
						url: data.data('url'),
						method: 'POST',
						data: form,
						success: function (response) {
							window.location.href = response.redirectToUrl;
						},
						error: function (error) {

						}
					});
				}
			}

		});

		function removeRecord(tr) {

			document.getElementById("parentTable").removeChild(tr.parentNode.parentNode);
		}

	</script>
}

